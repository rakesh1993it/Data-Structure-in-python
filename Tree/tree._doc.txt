1.Find the Maximum Depth or Height of a Tree
Algorithm:
     maxDepth()
    1. If tree is empty then return 0
    2. Else
         (a) Get the max depth of left subtree recursively  i.e.,
              call maxDepth( tree->left-subtree)
         (a) Get the max depth of right subtree recursively  i.e.,
              call maxDepth( tree->right-subtree)
         (c) Get the max of max depths of left and right
              subtrees and add 1 to it for the current node.
             max_depth = max(max dept of left subtree,
                                 max depth of right subtree)
                                 + 1
         (d) Return max_depth


2.Program to count leaf nodes in a binary tree

Algorithm:
    getLeafCount(node)
    1) If node is NULL then return 0.
    2) Else If left and right child nodes are NULL return 1.
    3) Else recursively calculate leaf count of the tree using below formula.
        Leaf count of a tree = Leaf count of left subtree +
                                     Leaf count of right subtree


3.Convert a Binary Tree into its Mirror Tree

Algorithm:
    (1)  Call Mirror for left-subtree    i.e., Mirror(left-subtree)
    (2)  Call Mirror for right-subtree  i.e., Mirror(right-subtree)
    (3)  Swap left and right subtrees.
              temp = left-subtree
              left-subtree = right-subtree
              right-subtree = temp